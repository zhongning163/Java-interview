（1）接口可以被多重implements，抽象类只能被单一extends
（2）接口只有定义，抽象类可以有定义和实现
（3）接口的字段定义默认为public static final，抽象类字段默认是default（有人叫它friendly）

抽象类是不能实例化的，即不能被分配内存，而static修饰的方法在类实例化之前就已经别分配了内存，
这样一来矛盾就出现了:抽象类不能被分配内存，而static方法必须被分配内存。所以抽象类中不能有静态的抽象方法。 
这和接口是一样的，接口中的方法也只能是 public abstract修饰的，不能加上static。

static永远不能和abstract碰头

什么时候使用抽象类和接口

如果你拥有一些方法并且想让它们中的一些有默认实现，那么使用抽象类吧。 
如果你想实现多重继承，那么你必须使用接口。由于Java不支持多继承，子类不能够继承多个类，但可以实现多个接口。因此你就可以使用接口来解决它。 
如果基本功能在不断改变，那么就需要使用抽象类。如果不断改变基本功能并且使用接口，那么就需要改变所有实现了该接口的类。

abstract关键字不可以与final，private,static关键字共存，因为被final修饰的方法不可以被重写
意味着子类不可以重写该方法，如果abstract和final共同修饰父类中的方法，子类要实现抽象方法（abstract的作用），而final又不让该方法重写，这相互矛盾。
如果private和abstract共同修饰父类中的方法，private修饰则该方法不可以被子类访问，但是abstract修饰需要子类去实现，两者产生矛盾。
如果static和abstract共同修饰父类中的方法，static表示是静态的方法，随着类的加载而加载，则该方法不需要在子类中去实现，这与abstract关键字矛盾。 
