Singleton模式
作用：
保证在Java应用程序中，一个类Class只有一个实例存在
一般Singleton有好几种形式

第一种形式：定义一个类，它的构造函数为private的，它有一个static的priavte的该类变量，
在类初始化时实例化，通过public的getInstance方法获取对它的引用，继而调用其中的方法

public class Singleton
{
  private Singleton(){}
  
    //这是private，仅供内部调用
    private static Singleton instance=new Singleton();
    //这里提供了一个供外部访问本class的静态方法，可以直接访问
    public static Singleton getInstance()
    {
      return instance;
    }
}

第二种形式：
比上面有所改进，不用每次都生成对象，只是第一次使用时生成实例，提高了效率
public class Singleton
{
  private static Singleton instance=null;
  public static synchronized Singleton getInstance()
  {
    if(instance==null)
      instance=new Singleton();
      return instance;
  }
}

