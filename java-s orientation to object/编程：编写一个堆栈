public class StackDemo
{
	int[] data;
	int maxSize;
	int top;
	public StackDemo(int maxSize)
	{
		this.maxSize=maxSize;
		data=new int[maxSize];
		top=-1;
	}
	/**
	*依次加入数据
	*@param data 要加入的数据
	*@return 添加是否成功
	*/
	public boolean push(int data)
	{
		if(top+1==maxSize)
		{
			System.out.println("栈已满！");
			return false;
		}
		//后一个data是传给方法的整型数据，前一个data是存储数据的数组名
		this.data[++top]=data;
		return true;
	}
	/**
	*从栈中取出数据
	*@return取出的数据
	*/
	public int pop() throws Exception
	{
		if(top==-1)
		{
			throw new Exception("栈已空");
		}
		return this.data[top--];
	}

	public static void main(String[] args) throws Exception
	{
		StackDemo stack=new StackDemo(1000);
		stack.push(1);
		stack.push(2);
		stack.push(3);
		stack.push(4);
		stack.push(5);
		while(stack.top>=0)
		{
			System.out.println(stack.pop());
		}
	}
}

====================================================================
栈数组实现一：
优点：入栈和出栈速度快，缺点：长度有限 
public class Stack {
	private int top = -1;
	private Object[] objs;
	
	public Stack(int capacity) throws Exception{
		if(capacity < 0)
			throw new Exception("Illegal capacity:"+capacity);
		objs = new Object[capacity];
	}
	
	public void push(Object obj) throws Exception{	//压栈，压入一个对象，每压进一个，top+1
		if(top == objs.length - 1)
			throw new Exception("Stack is full!");
		objs[++top] = obj;
	}
	
	public Object pop() throws Exception{
		if(top == -1)
			throw new Exception("Stack is empty!");
		return objs[top--];
	}
	
	public void dispaly(){
		System.out.print("bottom -> top: | ");
		for(int i = 0 ; i <= top ; i++){
			System.out.print(objs[i]+" | ");
		}
		System.out.print("\n");
	}
	 public static void main(String[] args)
	 {
	 	Stack s=new Stack(2);
		s.push(1)；
		s.push(2);
		s.display();
		System.out.println(s.pop());
		s.push(99);
		s.display();
		s.push(92);	//显示异常，栈已满
}

结果：
bottom -> top: | 1 | 2 | 
2
bottom -> top: | 1 | 
bottom -> top: | 1 | 99 | 
Exception in thread "main" java.lang.Exception: Stack is full!
	at Stack.push(Stack.java:17)
	at Stack.main(Stack.java:44)
数据项入栈和出栈的时间复杂度都为常数O(1)	

===============================================================================================================
栈数组实现二：优点：无长度限制，缺点：入栈慢
import java.util.Arrays;

public class UnbounderStack
{
	private int top = -1;
	private Object[] objs;
	
	public UnbounderStack() thorws Exception
	{
		this(10);		//如果没有指定栈的容量，默认初始为10；
	}
	public UnbounderStack(int capacity) thorws Exception
	{
		if(capacity<0)		//数组长度可以为0
			throw new Exception("Illegal capacity:"+capacity);
		objs=new Object[capacity]; 	
	}
	
	public void push(Object obj)
	{
		if(top == obj.length - 1)
		{
			this.enlarge();
		}
		objs[++top] = obj;
	}
	public Object pop() throws Exception
	{
		if(top==-1)
			throw new Exception("Stack is empty！");
		return objs[top--];
	}
	public void enlarge()
	{
		int num=objs.length/3;
		if(num == 0)
			num = 1;
		//调用Arrays类中的copyOf方法，copyOf(T[] original, int newLength)，original - 要复制的数组
		//newLength - 要返回的副本的长度
		objs=Arrays.copyOf(objs,objs.length+num);	
	}
	
	public void display()
	{
		System.out.println("bottom->top:|");
		for(int i=0;i<=top;i++)
		{
			System.out.println(+objs[i]+"|");
		}
		System.out.print("\n");
	}
	
	public static void main(String[] args) throws Exception
	{
		UnboundedStack us = new UnboundedStack(2);
		us.push(1);
		us.push(2);
		us.dispaly();
		System.out.println(us.pop());
		us.dispaly();
		us.push(99);
		us.dispaly();
		us.push(99);
		us.dispaly();

	}
}

结果：
bottom -> top: | 1 | 2 | 
2
bottom -> top: | 1 | 
bottom -> top: | 1 | 99 | 
bottom -> top: | 1 | 99 | 99 | 
由于该栈是由数组实现的，数组的长度是固定的，当栈空间不足时，必须将原数组数据复制到一个更长的数组中，
考虑到入栈时或许需要进行数组复制，平均需要复制N/2个数据项，故入栈的时间复杂度为O(N)，出栈的时间复杂度依然为O(1)

========================================================================================================
