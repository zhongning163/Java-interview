JVM中类的装载是由ClassLoader和它的子类来实现的，Java ClassLoader是一个重要Java运行时系统组件
它负责在运行时查找和装入类文件的类，JVM通过双亲委派模型进行类的加载
JVM提供了3种类加载器：

启动类加载器(Bootstrap ClassLoader)：负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，
且被虚拟机认可（按文件名识别，如rt.jar）的类。
扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\lib\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。
应用程序类加载器(Application ClassLoader)：负责加载用户路径（classpath）上的类库

JVM类加载机制分为五个部分：加载，验证，准备，解析，初始化

在装载阶段，虚拟机需要完成以下3件事情

        (1) 通过一个类的全限定名来获取定义此类的二进制字节流

        (2) 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构

        (3) 在Java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。

    虚拟机规范中并没有准确说明二进制字节流应该从哪里获取以及怎样获取,这里可以通过定义自己的类加载器去控制字节流的获取方式。
 
 验证
这一阶段的主要目的是为了确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。

准备
此阶段是正式为类变量分配并设置类变量初始值的阶段，这些内存都将在方法区中进行分配,
假如:public static int value = 123;
value在准备阶段过后的初始值为0而不是123,而把value赋值的putstatic指令将在初始化阶段才会被执行

解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。

初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，
其它操作都由JVM主导。到了初始阶段，才开始真正执行类中定义的Java程序代码。

【类初始化】 

1、遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，
  如果类没有进行过初始化，则需要先触发其初始化。
  生成这4条指令的最常见的Java代码场景是：使用new关键字实例化对象的时候，
  读取或设置一个类的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候，
  以及调用一个类的静态方法的时候。
  
  2、使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化
  
  3、当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化
  4、当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。
只有上述四种情况会触发初始化，也称为对一个类进行主动引用，除此以外，所有其他方式都不会触发初始化，称为被动引用
  
  a、定义对象数组，不会触发该类的初始化
  b、通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。
  c、通过类名获取Class对象，不会触发类的初始化。
  d、通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，
  其实这个参数是告诉虚拟机，是否要对类进行初始化。
  e、通过ClassLoader默认的loadClass方法，也不会触发初始化动作。

jdk中的ClassLoader的源码实现：
protected synchronized Class<?> loadClass(String name, boolean resolve)
        throws ClassNotFoundException {
    // First, check if the class has already been loaded
    Class c = findLoadedClass(name);
    if (c == null) {
        try {
            if (parent != null) {
                c = parent.loadClass(name, false);
            } else {
                c = findBootstrapClass0(name);
            }
        } catch (ClassNotFoundException e) {
            // If still not found, then invoke findClass in order
            // to find the class.
            c = findClass(name);
        }
    }
    if (resolve) {
        resolveClass(c);
    }
    return c;
}

首先通过Class c = findLoadedClass(name);判断一个类是否已经被加载过。
如果没有被加载过执行if (c == null)中的程序，遵循双亲委派的模型，首先会通过递归从父加载器开始找，直到父类加载器是Bootstrap ClassLoader为止。
最后根据resolve的值，判断这个class是否需要解析。

